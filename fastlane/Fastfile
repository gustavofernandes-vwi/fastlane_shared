require 'fileutils'

android_apk_folder = './build/app/outputs/flutter-apk'
android_aab_folder = ''
Actions.lane_context['INSTALLER_FILES'] = []

private_lane :flutter_version_values do
    version_info = flutter_version(pubspec_location: './pubspec.yaml')
    Actions.lane_context['FLUTTER_VERSION_NAME'] = version_info['version_name']
    Actions.lane_context['FLUTTER_VERSION_CODE'] = version_info['version_code']
end

private_lane :load_env do |options|
    flavor = options[:flavor]
    envs = {
        'prod' => '.env.prod',
        'beta' => '.env.beta',
        'alpha' => '.env.alpha',
    }
    Dotenv.load(envs[flavor])
end

private_lane :platforms do |options|
    flavor = options[:flavor]
    load_env(flavor: flavor)
    ENV.fetch('PLATFORMS').split(',')
end

desc "Exibe o código e nome de versão atual do app, conforme pubspec.yaml"
lane :version do
    UI.message Actions.lane_context['FLUTTER_VERSION_NAME']
    UI.message Actions.lane_context['FLUTTER_VERSION_CODE']
end

lane :make_changelog do |options|
    flavor = options[:flavor]
    load_env(flavor: flavor)
    version_name = Actions.lane_context['FLUTTER_VERSION_NAME']
    version_code = Actions.lane_context['FLUTTER_VERSION_CODE']
    download_notion_notes
    changelog_maker(
        version: version_name,
        build: version_code,
        templates: {
            "ios" => "fastlane/templates/ios-#{flavor}.erb",
            "android" => "fastlane/templates/android-#{flavor}.erb",
            "github" => "fastlane/templates/github-#{flavor}.erb",
        },
        results: {
            "ios" => 'fastlane/metadata/ios/changelog.md',
            "github" => 'fastlane/metadata/github/changelog.md',
            "android" => 'fastlane/metadata/android/pt-BR/changelogs/default.txt',
        },
        extra_data: File.read('metadata/notion/changelog.md'),
    )
end

lane :download_jira_notes do
    version_name = Actions.lane_context['FLUTTER_VERSION_NAME']
    text = jira_release_notes(
        username: "gustavofernandes@vivaweb.net",
        password: ENV['JIRA_TOKEN'], # password or api token
        url:      "https://viva-web.atlassian.net",
        project:  ENV['JIRA_PROJECT_NAME'],
        version:  "APP #{version_name}",
        format:   "markdown"
    )

    File.write(
        "./metadata/jira/changelog.md",
        "# Release notes - #{ENV['JIRA_PROJECT_NAME']} - Version APP #{version_name}\n\n",
    )
    File.write("./metadata/jira/changelog.md", text, mode: 'a')
end

lane :download_notion_notes do
    version_name = Actions.lane_context['FLUTTER_VERSION_NAME']
    text = notion_release_notes(
        version: version_name,
        template: File.join(File.dirname(File.expand_path(__FILE__)), './templates/notion_release_notes.erb')
    )
    
    File.write("./metadata/notion/changelog.md", text)
end

lane :download_notion_version_report do
    version_name = Actions.lane_context['FLUTTER_VERSION_NAME']
    text = notion_release_notes(
        version: version_name,
        template: File.join(File.dirname(File.expand_path(__FILE__)), './templates/notion_relatorio_chat.erb')
    )
    
    File.write("./metadata/notion/report.md", text)
end

desc "Exibe a data e a timestamp do último commit"
lane :last_commit do
    date = lastCommitDateTime
    version_code = dateTimeToTimestamp(date)

    UI.message "Last commit date: #{date}"
    UI.message "UTC timestamp: #{version_code}"
end

desc "Cria os arquivos de changelog para serem preenchidos"
desc "O conteúdo desses arquivos serão usados na hora de subir as builds"
lane :create_changelog_files do
    changelog(
        skip_create_files: false,
        skip_character_limit_check: true,
        skip_outdated_changelogs_check: true,
    )
end

private_lane :ensure_release_branch do
    version_name = Actions.lane_context['FLUTTER_VERSION_NAME']
    expected_branch = "release/#{version_name}"
    ensure_git_branch(branch: expected_branch)
end

private_lane :commit_generated_files do
    files = [
        "pubspec.lock",
        "ios/OneSignalNotificationServiceExtension/Info.plist",
        "ios/Podfile.lock",
        "macos/Flutter/GeneratedPluginRegistrant.swift",
        "lib/generated_plugin_registrant.dart",
        "fastlane/README.md"
    ]
    begin
        git_commit(
            path: files.filter {|file| File.exist?("../"+file) },
            message: "Build generated files",
            allow_nothing_to_commit: true,
        )
    rescue => exception
        UI.important(exception.message)
    end
end

private_lane :discard_git_changes do
    reset_git_repo(
        skip_clean: true,
        disregard_gitignore: false,
    )
end

private_lane :check_changelogs do |options|
    changelog(
        skip_ios: options[:skip_ios],
        skip_android: options[:skip_android],
        skip_github: options[:skip_github],
    )
end

desc "Cria a release no GitHub e gera builds executáveis (apk do android) para anexar na release."
lane :beta_github_release do |options|
    skip_github_build = options[:skip_github_build] || false

    load_env(flavor: 'beta')

    if !skip_github_build
        Fastlane::LaneManager.cruise_lane('android','beta_installer_file')
    end

    version_name = Actions.lane_context['FLUTTER_VERSION_NAME']
    version_code = Actions.lane_context['FLUTTER_VERSION_CODE']
    add_git_tag(
        includes_lane: false,
        prefix: "v",
        build_number: version_name,
        postfix: "-beta.#{version_code}"
    )
    push_git_tags

    set_github_release(
        name: "Release #{version_name} - beta (build #{version_code})",
        repository_name: ENV['REPOSITORY_NAME'],
        api_token: ENV['GITHUB_TOKEN'],
        is_draft: false,
        is_prerelease: true,
        upload_assets: Actions.lane_context['INSTALLER_FILES'],
        commitish: "release/#{version_name}",
        tag_name: last_git_tag,
        description: (File.read(Actions.lane_context['CHANGELOG_GITHUB_FILE'].sub! './fastlane/', '') rescue "_No changelog provided_"),
    )
end

desc "Cria a release no GitHub e gera builds executáveis (apk do android) para anexar na release."
lane :prod_github_release do |options|
    skip_github_build = options[:skip_github_build] || false

    load_env(flavor: 'prod')

    if !skip_github_build
        Fastlane::LaneManager.cruise_lane('android','prod_installer_file')
    end

    version_name = Actions.lane_context['FLUTTER_VERSION_NAME']
    version_code = Actions.lane_context['FLUTTER_VERSION_CODE']
    add_git_tag(
        includes_lane: false,
        prefix: "v",
        build_number: version_name,
    )
    push_git_tags

    set_github_release(
        name: "Release #{version_name}",
        repository_name: ENV['REPOSITORY_NAME'],
        api_token: ENV['GITHUB_TOKEN'],
        is_draft: false,
        upload_assets: Actions.lane_context['INSTALLER_FILES'],
        commitish: "release/#{version_name}",
        tag_name: last_git_tag,
        description: (File.read(Actions.lane_context['CHANGELOG_GITHUB_FILE'].sub! './fastlane/', '') rescue "_No changelog provided_"),
    )
end

private_lane :google_drive_upload do |options|
    load_env(options[:flavor])
    app_name = ENV.fetch('APP_NAME')
    version = Actions.lane_context['LAST_BUILD_VERSION_NAME']
    build = Actions.lane_context['LAST_BUILD_NUMBER']
    drive_keyfile = './fastlane/keys/google_drive_alpha.json'

    release_to_google_drive(
        drive_keyfile: drive_keyfile,
        upload_files: Actions.lane_context['INSTALLER_FILES'],
        app_name: app_name,
        version_name: version,
        build_number: build,
    )
end

lane :alpha_google_drive_release do
    load_env(flavor: 'alpha')
    ensure_git_branch(branch: 'master')

    Fastlane::LaneManager.cruise_lane('android','alpha_installer_file')
    alpha_google_drive_upload
end

private_lane :alpha_google_drive_upload do |options|
    load_env(flavor: 'alpha')

    drive_keyfile = './fastlane/keys/google_drive_alpha.json'
    root_folder = ENV['GOOGLE_DRIVE_RELEASE_FOLDER_ID']

    # TODO: Trocar esses dados por um LaneContext emitido na hora de buildar o alpha
    date = lastCommitDateTime
    version_name = '0.0.1'
    version_code = dateTimeToTimestamp(date)
    
    UI.message date
    UI.message version_code
    
    date = date.new_offset(-3) # Para exibir sempre no horário de brasília
    subfolder_title = date.strftime("%F %H:%M") + " (build #{version_code})"

    UI.message subfolder_title

    find_google_drive_file_by_title(
        drive_keyfile: drive_keyfile,
        parent_folder_id: root_folder,
        file_title: subfolder_title,
        service_account: false,
    )

    subfolder_id = ""

    if lane_context[SharedValues::GDRIVE_FILE_ID]
        subfolder_id = lane_context[SharedValues::GDRIVE_FILE_ID]
    else
        create_google_drive_folder(
            drive_keyfile: drive_keyfile,
            service_account: false,
            parent_folder_id: root_folder,
            folder_title: subfolder_title
        )
        subfolder_id = lane_context[SharedValues::GDRIVE_FILE_ID]
    end

    upload_to_google_drive(
        drive_keyfile: drive_keyfile,
        service_account: false,
        folder_id: subfolder_id,
        upload_files: Actions.lane_context['INSTALLER_FILES']
    )

    uploaded_file_names = lane_context[SharedValues::GDRIVE_UPLOADED_FILE_NAMES]
    UI.message("Uploaded files: #{uploaded_file_names}")

    UI.success "Build salvo na sub-pasta #{subfolder_title}. Para encontrar mais fácil, use a ordem decrescente"
end

lane :test_keys do |options|
    skip_ios = options[:skip_ios] || false
    skip_android = options[:skip_android] || false

    # GITHUB_TOKEN ------------------------------------------------------------
    github_token = ENV["GITHUB_TOKEN"]
    UI.abort_with_message! 'key "GITHUB_TOKEN" not informed' unless github_token && !github_token.empty?
    github_api(
        server_url: "https://api.github.com",
        api_token: github_token,
        http_method: "GET",
        path: "/repos/#{ENV["REPOSITORY_NAME"]}/readme",
        body: { ref: "master" },
        error_handlers: {
            '*' => proc do |result|
                UI.abort_with_message! 'key "GITHUB_TOKEN" test failed'
            end
        },
    )

    # AppStore Credentials ----------------------------------------------------
    if !skip_ios
        begin
            package_name = CredentialsManager::AppfileConfig.try_fetch_value(:package_name)
            latest_testflight_build_number(
                api_key_path: 'fastlane/keys/app-store-key.json',
                app_identifier: package_name
            )
        rescue => exception
            UI.error exception
            UI.abort_with_message! 'AppStore Credentials test failed'
        end
    end
    
    # Google Play Credentials -------------------------------------------------
    if !skip_android
        begin
            google_play_track_version_codes
        rescue => exception
            UI.abort_with_message! 'Google Play Credentials test failed'
        end
    end

    UI.success "All access keys test passed"
end

platform :all do
    desc "Gera as builds **Beta** para ambas as plataformas e faz upload para as ferramentas de distribuição correspondentes."
    desc "Também cria a release no GitHub e gera builds executáveis (apk do android) para anexar na release."
    desc "Esta é a lane de mais alto nível, que chama outras lanes para que tudo que precisa ser feito aconteça com um único comando."
    desc "O tempo de execução dessa lane é altamente elevado."
    lane :beta do |options|
        skip_ios = (options[:skip_ios] || false) && platforms(flavor: 'beta').include? 'ios'
        skip_android = (options[:skip_android] || false) && platforms(flavor: 'beta').include? 'android'
        skip_github = options[:skip_github] || false
        skip_google_drive = options[:skip_google_drive] || true

        skip_build = options[:skip_build] || false
        skip_ios_build = options[:skip_ios_build] || false
        skip_android_build = options[:skip_android_build] || false
        skip_github_build = options[:skip_github_build] || false

        build_installer = !(skip_github || skip_github_build) || !skip_google_drive

        release = options[:release] || false
        
        load_env(flavor: 'beta')

        test_keys(skip_ios: skip_ios, skip_android: skip_android)

        if !skip_build
            make_changelog(flavor: 'beta')
            check_changelogs(options)
        end
        ensure_release_branch

        if !skip_build
            if !skip_ios && !skip_ios_build
                Fastlane::LaneManager.cruise_lane('ios','validate_build_number', production: false)
            end
        
            if !skip_android && !skip_android_build
                Fastlane::LaneManager.cruise_lane('android','validate_build_number', track: 'internal')
                ensure_android_changelog_limit
            end
        
            if !skip_ios && !skip_ios_build
                # Build for iOS and upload to AppStore Connect
                Fastlane::LaneManager.cruise_lane('ios','beta')
                commit_generated_files
            end
            
            if !skip_android && !skip_android_build
                # Build for Android and upload to Google Play Console
                Fastlane::LaneManager.cruise_lane('android','beta')
                commit_generated_files
            end

            if build_installer
                Fastlane::LaneManager.cruise_lane('android','beta_installer_file')
                commit_generated_files
            end

            if !skip_github
                beta_github_release(skip_github_build: true)
            end

            if !skip_google_drive
                google_drive_upload(flavor: 'beta')
            end
        end

        # All builds uploaded, time to release

        if release
            if !skip_ios
                # Release iOS app on AppStore Connect
                Fastlane::LaneManager.cruise_lane('ios','release_beta')
            end
        
            if !skip_android
                # Release Android app on Google Play Console
                Fastlane::LaneManager.cruise_lane('android','release_beta')
            end
        end
    end

    desc "Gera as builds de **produção** para ambas as plataformas e faz upload para as ferramentas de distribuição correspondentes."
    desc "Também cria a release no GitHub e gera builds executáveis (apk do android) para anexar na release."
    desc "Esta é a lane de mais alto nível, que chama outras lanes para que tudo que precisa ser feito aconteça com um único comando."
    desc "O tempo de execução dessa lane é altamente elevado."
    lane :prod do |options|
        skip_ios = (options[:skip_ios] || false) && platforms(flavor: 'prod').include? 'ios'
        skip_android = (options[:skip_android] || false) && platforms(flavor: 'prod').include? 'android'
        skip_github = options[:skip_github] || false
        skip_google_drive = options[:skip_google_drive] || true

        skip_github_build = false

        build_installer = !(skip_github || skip_github_build) || !skip_google_drive

        load_env(flavor: 'prod')

        test_keys(skip_ios: skip_ios, skip_android: skip_android)

        make_changelog(flavor: 'prod')
        check_changelogs(options)
        ensure_release_branch

        if !skip_ios
            Fastlane::LaneManager.cruise_lane('ios','validate_build_number', production: true)
        end

        if !skip_android
            Fastlane::LaneManager.cruise_lane('android','validate_build_number', track: 'production')
            ensure_android_changelog_limit
        end

        if !skip_ios
            # Build for iOS and upload to AppStore Connect
            Fastlane::LaneManager.cruise_lane('ios','prod')
            commit_generated_files
        end
        
        if !skip_android
            # Build for Android and upload to Google Play Console
            Fastlane::LaneManager.cruise_lane('android','prod')
            commit_generated_files
        end
        
        if build_installer
            Fastlane::LaneManager.cruise_lane('android','prod_installer_file')
        end

        if !skip_github
            prod_github_release(skip_github_build: true)
            commit_generated_files
        end

        if !skip_google_drive
            google_drive_upload(flavor: 'prod')
        end
    end

    desc "Gera as builds **alpha** para ambas as plataformas e faz upload para as ferramentas de distribuição correspondentes."
    desc "As builds são numeradas automaticamente de acordo com o último commit e também são liberadas automaticamente"
    lane :alpha do |options|
        skip_ios = (options[:skip_ios] || false) && platforms(flavor: 'alpha').include? 'ios'
        skip_android = (options[:skip_android] || false) && platforms(flavor: 'alpha').include? 'android'
        skip_google_drive = options[:skip_google_drive] || true

        build_installer = !skip_google_drive

        load_env(flavor: 'alpha')

        ensure_git_branch(branch: 'master')

        test_keys(skip_ios: skip_ios, skip_android: skip_android)

        if !skip_ios
            # Build for iOS and upload to AppStore Connect
            Fastlane::LaneManager.cruise_lane('ios','alpha')
            discard_git_changes
        end
        
        if !skip_android
            # Build for Android and upload to Google Play Console
            Fastlane::LaneManager.cruise_lane('android','alpha')
            discard_git_changes
        end

        if build_installer
            Fastlane::LaneManager.cruise_lane('android', 'alpha_installer_file')
            discard_git_changes
        end

        if !skip_google_drive
            google_drive_upload(flavor: 'alpha')
        end

        # All builds uploaded, time to release

        if !skip_ios
            # Release iOS app on AppStore Connect
            Fastlane::LaneManager.cruise_lane('ios','release_alpha')
        end

        if !skip_android
            # Release Android app on Google Play Console
            Fastlane::LaneManager.cruise_lane('android','release_alpha')
        end

        if !skip_google_drive
            # Upload apk to google drive
            alpha_google_drive_upload
        end
    end
end

platform :ios do

    desc "Certifica que o número de build atual ainda não foi usado e é maior que o mais recente"
    lane :validate_build_number do |options|
        production = options[:production] != nil ? options[:production] : true
        latest_build_number = nil
        
        package_name = CredentialsManager::AppfileConfig.try_fetch_value(:package_name)
        if production
            latest_build_number = app_store_build_number(
                api_key_path: 'fastlane/keys/app-store-key.json',
                app_identifier: package_name
            )
        else
            latest_build_number = latest_testflight_build_number(
                api_key_path: 'fastlane/keys/app-store-key.json',
                app_identifier: package_name
            )
        end
    
        build_number = Actions.lane_context['FLUTTER_VERSION_CODE']
    
        if latest_build_number != nil && build_number.to_i <= latest_build_number
            UI.abort_with_message! "Build number #{build_number} is equal or smaller than latest number on App Store Connect (#{latest_build_number})"
        end
    end

    desc "Gera a build **beta** do iOS e faz upload para o AppStore Connect (TestFlight)"
    lane :beta do
        load_env(flavor: 'beta')
        ensure_release_branch
        validate_build_number production: false
        # prepare_certificates
        flutter_build(build_args: ["--flavor=beta"])
        gym(
            workspace: 'ios/Runner.xcworkspace',
            scheme: 'beta',
            clean: true,
            export_method: "app-store",
            export_xcargs: "-allowProvisioningUpdates",
        )
        Actions.lane_context['LAST_BUILD_VERSION_NAME'] = Actions.lane_context['FLUTTER_VERSION_NAME']
        Actions.lane_context['LAST_BUILD_NUMBER'] = Actions.lane_context['FLUTTER_VERSION_CODE']
        pilot(
            # skip_submission: true,
            skip_waiting_for_build_processing: true,
            api_key_path: 'fastlane/keys/app-store-key.json',
            changelog: (File.read(Actions.lane_context['CHANGELOG_IOS_FILE'].sub! './fastlane/', '') rescue ""),
        )
    end

    lane :release_beta do
        load_env(flavor: 'beta')
        commit_generated_files

        version_name = Actions.lane_context['LAST_BUILD_VERSION_NAME']
        version_code = Actions.lane_context['LAST_BUILD_NUMBER']
        package_name = CredentialsManager::AppfileConfig.try_fetch_value(:package_name)

        pilot(
            app_platform: 'ios',
            distribute_external: true,
            distribute_only: true,
            app_version: version_name,
            build_number: "#{version_code}",
            app_identifier: package_name,
            groups: ['Vivaweb'],
            api_key_path: 'fastlane/keys/app-store-key.json',
        )
    end

    desc "Gera a build de **produção** do iOS e faz upload para o AppStore Connect (TestFlight)"
    lane :prod do
        load_env(flavor: 'prod')
        ensure_release_branch
        validate_build_number
        # prepare_certificates
        flutter_build(build_args: ["--flavor=prod"])
        gym(
            workspace: 'ios/Runner.xcworkspace',
            scheme: 'prod',
            clean: true,
            export_method: "app-store",
            export_xcargs: "-allowProvisioningUpdates",
        )
        changelog_path = Actions.lane_context['CHANGELOG_IOS_FILE'].sub! './fastlane/', ''
        FileUtils.mkdir_p "metadata/ios/deliver/pt-BR"
        FileUtils.copy_file changelog_path, "metadata/ios/deliver/pt-BR/release_notes.txt"
        Actions.lane_context['LAST_BUILD_VERSION_NAME'] = Actions.lane_context['FLUTTER_VERSION_NAME']
        Actions.lane_context['LAST_BUILD_NUMBER'] = Actions.lane_context['FLUTTER_VERSION_CODE']
        deliver(
            metadata_path: "fastlane/metadata/ios/deliver",
            api_key_path: 'fastlane/keys/app-store-key.json',
            skip_screenshots: true,
            force: true,
            precheck_include_in_app_purchases: false,
        )
    end

    lane :submit_to_review do
        load_env(flavor: 'prod')
        # Não precisa verificar pois não depende dos arquivos locais
        # Se for forçar o número da versão que for liberar, daí precisa checar a branch
        # ensure_release_branch
        deliver(
            api_key_path: 'fastlane/keys/app-store-key.json',
            precheck_include_in_app_purchases: false,
            submit_for_review: true,
            automatic_release: false,

            skip_binary_upload: true,
            skip_screenshots: true,
            skip_metadata: true,
            skip_app_version_update: true,
        )
    end

    lane :alpha do
        load_env(flavor: 'alpha')
        ensure_git_branch(branch: 'master')

        date = lastCommitDateTime
        version_name = '0.0.1'
        version_code = dateTimeToTimestamp(date)

        # disable_automatic_code_signing(path: 'ios/Runner.xcodeproj')
        # prepare_certificates
        # update_project_provisioning(
        #     xcodeproj: "ios/Runner.xcodeproj",
        #     # profile: "./watch_app_store.mobileprovision", # optional if you use sigh
        #     # target_filter: ".*WatchKit Extension.*", # matches name or type of a target
        #     build_configuration: "Release-alpha",
        #     # code_signing_identity: "iPhone Development" # optionally specify the codesigning identity
        # )
        flutter_build(
            build_args: ["--flavor=alpha"],
            build_number: version_code,
            build_name: version_name,
        )
        gym(
            workspace: 'ios/Runner.xcworkspace',
            scheme: 'alpha',
            clean: true,
            export_method: "app-store",
            export_xcargs: "-allowProvisioningUpdates",
        )
        # enable_automatic_code_signing(path: 'ios/Runner.xcodeproj')
        Actions.lane_context['LAST_BUILD_VERSION_NAME'] = version_name
        Actions.lane_context['LAST_BUILD_NUMBER'] = version_code
        pilot(
            app_version: version_name,
            build_number: "#{version_code}",
            changelog: 'Sem informações sobre essa versão no momento',
            api_key_path: 'fastlane/keys/app-store-key.json',
        )
    end

    lane :release_alpha do
        load_env(flavor: 'alpha')
        date = lastCommitDateTime
        version_name = '0.0.1'
        version_code = dateTimeToTimestamp(date)
        package_name = CredentialsManager::AppfileConfig.try_fetch_value(:package_name)

        pilot(
            app_platform: 'ios',
            distribute_external: true,
            distribute_only: true,
            app_identifier: package_name,
            groups: ['Devs'],
            api_key_path: 'fastlane/keys/app-store-key.json',
        )
    end

    lane :prepare_certificates do
        package_name = CredentialsManager::AppfileConfig.try_fetch_value(:package_name)
        cert(
            api_key_path: 'fastlane/keys/app-store-key.json',
            keychain_password: ENV['KEYCHAIN_PASSWORD'],
            output_path: 'fastlane/keys/',
            generate_apple_certs: true,
        )
        sigh(
            # readonly: true,
            api_key_path: 'fastlane/keys/app-store-key.json',
            app_identifier: package_name,
            output_path: 'fastlane/keys/',
        )
        if (File.exist?("../ios/OneSignalNotificationServiceExtension/NotificationService.swift")) then
            sigh(
                # readonly: true,
                api_key_path: 'fastlane/keys/app-store-key.json',
                app_identifier: "#{package_name}.OneSignalNotificationServiceExtension",
                output_path: 'fastlane/keys/',
            )
        end
    end
end

platform :android do

    desc "Certifica que o número de build atual ainda não foi usado e é maior que o mais recente"
    lane :validate_build_number do |options|
        track = options[:track]
        
        version_codes = google_play_track_version_codes(
            track: track,
        )
        latest_build_number = version_codes[0]
    
        build_number = Actions.lane_context['FLUTTER_VERSION_CODE']
    
        if latest_build_number != nil && build_number.to_i <= latest_build_number
            UI.abort_with_message! "Build number #{build_number} is equal or smaller than latest number on Play Store Console (#{latest_build_number})"
        end
    end

    desc "Gera o appbundle do **beta** para Android e faz upload para o Google Play Console"
    lane :beta do
        load_env(flavor: 'beta')
        validate_build_number(track: 'internal')
        ensure_android_changelog_limit
        ensure_release_branch
        begin
            flutter_build(build: 'appbundle')
        rescue => exception
            raise exception unless exception.message.include?('Gradle build failed to produce an .aab file. It\'s likely that this file was generated under')
            UI.important(exception.message)
        end
        version_name = Actions.lane_context['FLUTTER_VERSION_NAME']
        version_code = Actions.lane_context['FLUTTER_VERSION_CODE']
        Actions.lane_context['LAST_BUILD_VERSION_NAME'] = version_name
        Actions.lane_context['LAST_BUILD_NUMBER'] = version_code
        supply(
            track: 'internal',
            aab: './build/app/outputs/bundle/betaRelease/app-beta-release.aab',
            release_status: 'draft',
            version_name: "#{version_code} (#{version_name})",
            version_code: "#{version_code}",
        )

        Actions.lane_context['LAST_BUILD_VERSION_NAME'] = version_name
        Actions.lane_context['LAST_BUILD_NUMBER'] = version_code
    end

    lane :release_beta do
        load_env(flavor: 'beta')
        commit_generated_files
        
        version_name = Actions.lane_context['LAST_BUILD_VERSION_NAME']
        version_code = Actions.lane_context['LAST_BUILD_NUMBER']

        supply(
            skip_upload_aab: true,
            track: 'internal',
            track_promote_to: 'internal',
            release_status: 'completed',
            version_code: "#{version_code}",
            rollout: '1',
            skip_upload_apk: true,
            skip_upload_metadata: true,
            skip_upload_changelogs: true,
            skip_upload_images: true,
            skip_upload_screenshots: true,
        )
    end

    lane :beta_installer_file do
        load_env(flavor: 'beta')
        ensure_release_branch
        begin
            flutter_build(build: 'apk')
        rescue => exception
            raise exception unless exception.message.include?('Gradle build failed to produce an .apk file. It\'s likely that this file was generated under')
            UI.important(exception.message)
        end
        Actions.lane_context['INSTALLER_FILES'] << "#{android_apk_folder}/app-beta-release.apk"

        Actions.lane_context['LAST_BUILD_VERSION_NAME'] = Actions.lane_context['FLUTTER_VERSION_NAME']
        Actions.lane_context['LAST_BUILD_NUMBER'] = Actions.lane_context['FLUTTER_VERSION_CODE']
    end

    desc "Gera o appbundle da **produção** para Android"
    lane :prod do
        load_env(flavor: 'prod')
        validate_build_number(track: 'production')
        ensure_android_changelog_limit
        ensure_release_branch
        begin
            flutter_build(build: 'appbundle')
        rescue => exception
            raise exception unless exception.message.include?('Gradle build failed to produce an .aab file. It\'s likely that this file was generated under')
            UI.important(exception.message)
        end
        version_name = Actions.lane_context['FLUTTER_VERSION_NAME']
        version_code = Actions.lane_context['FLUTTER_VERSION_CODE']
        Actions.lane_context['LAST_BUILD_VERSION_NAME'] = version_name
        Actions.lane_context['LAST_BUILD_NUMBER'] = version_code
        supply(
            aab: './build/app/outputs/bundle/prodRelease/app-prod-release.aab',
            release_status: 'draft',
            version_name: "#{version_code} (#{version_name})",
            version_code: "#{version_code}"
        )
    end

    lane :prod_installer_file do
        ensure_release_branch
        begin
            flutter_build(build: 'apk')
        rescue => exception
            raise exception unless exception.message.include?('Gradle build failed to produce an .apk file. It\'s likely that this file was generated under')
            UI.important(exception.message)
        end
        Actions.lane_context['INSTALLER_FILES'] << "#{android_apk_folder}/app-prod-release.apk"

        Actions.lane_context['LAST_BUILD_VERSION_NAME'] = Actions.lane_context['FLUTTER_VERSION_NAME']
        Actions.lane_context['LAST_BUILD_NUMBER'] = Actions.lane_context['FLUTTER_VERSION_CODE']
    end

    lane :alpha do
        load_env(flavor: 'alpha')
        ensure_android_changelog_limit
        ensure_git_branch(branch: 'master')

        date = lastCommitDateTime
        version_name = '0.0.1'
        version_code = dateTimeToTimestamp(date)
        begin
            flutter_build(
                build: 'appbundle',
                build_number: version_code,
                build_name: version_name,
            )
        rescue => exception
            raise exception unless exception.message.include?('Gradle build failed to produce an .aab file. It\'s likely that this file was generated under')
            UI.important(exception.message)
        end

        Actions.lane_context['LAST_BUILD_VERSION_NAME'] = version_name
        Actions.lane_context['LAST_BUILD_NUMBER'] = version_code

        File.open("./metadata/android/pt-BR/changelogs/#{version_code}.txt", "w") {}
        File.write(
            "./metadata/android/pt-BR/changelogs/#{version_code}.txt",
            'Sem informações sobre essa versão no momento',
        )

        supply(
            track: 'internal',
            aab: './build/app/outputs/bundle/alphaRelease/app-alpha-release.aab',
            release_status: 'draft',
            version_name: "#{version_code} (#{version_name})",
        )

        File.delete("./metadata/android/pt-BR/changelogs/#{version_code}.txt")
    end

    lane :release_alpha do
        load_env(flavor: 'alpha')
        version_codes = google_play_track_version_codes(
            track: 'internal',
        )

        version_code = version_codes[0]

        supply(
            skip_upload_aab: true,
            track: 'internal',
            track_promote_to: 'internal',
            release_status: 'completed',
            version_code: "#{version_code}",
            rollout: '1',
            skip_upload_apk: true,
            skip_upload_metadata: true,
            skip_upload_changelogs: true,
            skip_upload_images: true,
            skip_upload_screenshots: true,
        )
    end

    lane :alpha_installer_file do |options|
        organize_folders = options[:organize_folders] || false
        delete_older_builds = options[:delete_older_builds] || false

        load_env(flavor: 'alpha')
        ensure_git_branch(branch: 'master')

        date = lastCommitDateTime
        version_name = '0.0.1'
        version_code = dateTimeToTimestamp(date)
        begin
            flutter_build(
                build: 'apk',
                build_number: version_code,
                build_name: version_name,
            )
        rescue => exception
            raise exception unless exception.message.include?('Gradle build failed to produce an .apk file. It\'s likely that this file was generated under')
            UI.important(exception.message)
        end

        Actions.lane_context['LAST_BUILD_VERSION_NAME'] = version_name
        Actions.lane_context['LAST_BUILD_NUMBER'] = version_code

        file_path = "#{android_apk_folder}/app-alpha-release.apk"

        if organize_folders then
            date_sp = date.new_offset(-3)
            build_folder = date_sp.strftime("%F %H:%M") + " (build #{version_code})"
            new_path = "#{android_apk_folder}/alpha/#{build_folder}"

            Dir.mkdir("#{android_apk_folder.sub('./', '../')}/alpha") unless File.directory?("#{android_apk_folder.sub('./', '../')}/alpha")

            if delete_older_builds then
                FileUtils.rm_rf Dir.glob("#{android_apk_folder.sub('./', '../')}/alpha/*")
            end

            Dir.mkdir(new_path.sub('./', '../')) unless File.directory?(new_path.sub('./', '../'))

            File.rename file_path.sub('./', '../'), "#{new_path.sub('./', '../')}/vivaintra-tv-alpha.apk"
            file_path = "#{new_path}/vivaintra-tv-alpha.apk"

            UI.message "Nova build salva em #{file_path}"
        end

        Actions.lane_context['INSTALLER_FILES'] << file_path
    end
end

def dateTimeToTimestamp(date)
    utc = date.new_offset(0)
    hours_offset = utc.strftime("%z")[1, 2].to_i
    timestamp_offset = hours_offset * 60 * 60
    return utc.to_time.to_i
end

def lastCommitDateTime
    git_log = `git log -n1 --pretty="%ci"`
    git_log = git_log.strip
    return DateTime.strptime(git_log, "%Y-%m-%d %H:%M:%S %z")
end